# -*- coding: utf-8 -*-
# Generated by Django 1.11.9 on 2018-05-15 10:35
from __future__ import unicode_literals

import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0016_auto_20180510_1635'),
    ]

    operations = [
        migrations.CreateModel(
            name='StoredAckReportComputedTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sig', models.BinaryField()),
                ('timestamp', models.IntegerField()),
                ('encrypted', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StoredCannotComputeTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sig', models.BinaryField()),
                ('timestamp', models.IntegerField()),
                ('encrypted', models.BooleanField(default=False)),
                ('reason', models.CharField(choices=[('WrongCTD', 'WrongCTD'), ('WrongKey', 'WrongKey'), ('WrongAddress', 'WrongAddress'), ('WrongEnvironment', 'WrongEnvironment'), ('NoSourceCode', 'NoSourceCode'), ('WrongDockerImages', 'WrongDockerImages'), ('ConcentRequired', 'ConcentRequired'), ('ConcentDisabled', 'ConcentDisabled')], max_length=32)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StoredComputeTaskDef',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sig', models.BinaryField()),
                ('timestamp', models.IntegerField()),
                ('encrypted', models.BooleanField(default=False)),
                ('task_id', models.CharField(max_length=128)),
                ('subtask_id', models.CharField(max_length=128)),
                ('deadline', models.DecimalField(decimal_places=2, max_digits=3)),
                ('src_code', models.TextField()),
                ('extra_data', django.contrib.postgres.fields.jsonb.JSONField()),
                ('short_description', models.TextField()),
                ('working_directory', models.TextField()),
                ('performance', models.DecimalField(decimal_places=2, max_digits=3)),
                ('docker_images', django.contrib.postgres.fields.jsonb.JSONField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StoredRejectReportComputedTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sig', models.BinaryField()),
                ('timestamp', models.IntegerField()),
                ('encrypted', models.BooleanField(default=False)),
                ('reason', models.CharField(choices=[('SubtaskTimeLimitExceeded', 'SubtaskTimeLimitExceeded'), ('GotMessageCannotComputeTask', 'GotMessageCannotComputeTask'), ('GotMessageTaskFailure', 'GotMessageTaskFailure')], max_length=32)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StoredReportComputedTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sig', models.BinaryField()),
                ('timestamp', models.IntegerField()),
                ('encrypted', models.BooleanField(default=False)),
                ('result_type', models.PositiveSmallIntegerField()),
                ('node_name', models.CharField(max_length=32)),
                ('address', models.TextField()),
                ('node_info', django.contrib.postgres.fields.jsonb.JSONField()),
                ('port', models.IntegerField()),
                ('key_id', models.BinaryField()),
                ('extra_data', django.contrib.postgres.fields.jsonb.JSONField()),
                ('eth_account', models.CharField(max_length=32)),
                ('size', models.IntegerField()),
                ('package_hash', models.TextField()),
                ('multihash', models.TextField()),
                ('secret', models.TextField()),
                ('options', models.TextField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StoredSubtaskResultsAccepted',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sig', models.BinaryField()),
                ('timestamp', models.IntegerField()),
                ('encrypted', models.BooleanField(default=False)),
                ('payment_ts', models.IntegerField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StoredSubtaskResultsRejected',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sig', models.BinaryField()),
                ('timestamp', models.IntegerField()),
                ('encrypted', models.BooleanField(default=False)),
                ('reason', models.CharField(choices=[('VerificationNegative', 'VerificationNegative'), ('ConcentResourcesFailure', 'ConcentResourcesFailure'), ('ConcentVerificationNegative', 'ConcentVerificationNegative'), ('ForcedResourcesFailure', 'ForcedResourcesFailure'), ('ResourcesFailure', 'ResourcesFailure')], max_length=32)),
                ('report_computed_task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.StoredReportComputedTask')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StoredTaskFailure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sig', models.BinaryField()),
                ('timestamp', models.IntegerField()),
                ('encrypted', models.BooleanField(default=False)),
                ('err', models.TextField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StoredTaskToCompute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sig', models.BinaryField()),
                ('timestamp', models.IntegerField()),
                ('encrypted', models.BooleanField(default=False)),
                ('requestor_id', models.BinaryField()),
                ('requestor_public_key', models.BinaryField()),
                ('requestor_ethereum_public_key', models.BinaryField()),
                ('provider_id', models.BinaryField()),
                ('provider_public_key', models.BinaryField()),
                ('provider_ethereum_public_key', models.BinaryField()),
                ('package_hash', models.TextField()),
                ('concent_enabled', models.BooleanField(default=False)),
                ('price', models.IntegerField()),
                ('compute_task_def', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.StoredComputeTaskDef')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='storedtaskfailure',
            name='task_to_compute',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.StoredTaskToCompute'),
        ),
        migrations.AddField(
            model_name='storedsubtaskresultsaccepted',
            name='task_to_compute',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.StoredTaskToCompute'),
        ),
        migrations.AddField(
            model_name='storedreportcomputedtask',
            name='task_to_compute',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.StoredTaskToCompute'),
        ),
        migrations.AddField(
            model_name='storedrejectreportcomputedtask',
            name='attached_task_to_compute',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.StoredTaskToCompute'),
        ),
        migrations.AddField(
            model_name='storedrejectreportcomputedtask',
            name='cannot_compute_task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.StoredCannotComputeTask'),
        ),
        migrations.AddField(
            model_name='storedrejectreportcomputedtask',
            name='task_failure',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.StoredTaskFailure'),
        ),
        migrations.AddField(
            model_name='storedcannotcomputetask',
            name='task_to_compute',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.StoredTaskToCompute'),
        ),
        migrations.AddField(
            model_name='storedackreportcomputedtask',
            name='report_computed_task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.StoredReportComputedTask'),
        ),
    ]
